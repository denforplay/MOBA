@startuml
class "FactoryFromBinder`4"<TParam1,TParam2,TParam3,TContract> {
    + FactoryFromBinder(container:DiContainer, bindInfo:BindInfo, factoryBindInfo:FactoryBindInfo)
    + FromMethod(method:Func<DiContainer, TParam1, TParam2, TParam3, TContract>) : ConditionCopyNonLazyBinder
    + FromFactory() : ConditionCopyNonLazyBinder
    + FromSubContainerResolve() : FactorySubContainerBinder<TParam1, TParam2, TParam3, TContract>
    + FromSubContainerResolve(subIdentifier:object) : FactorySubContainerBinder<TParam1, TParam2, TParam3, TContract>
}
class FactoryFromBinder3Extensions <<static>> {
    + {static} FromIFactory(fromBinder:FactoryFromBinder<TParam1, TParam2, TParam3, TContract>, factoryBindGenerator:Action<ConcreteBinderGeneric<IFactory<TParam1, TParam2, TParam3, TContract>>>) : ArgConditionCopyNonLazyBinder
    + {static} FromPoolableMemoryPool(fromBinder:FactoryFromBinder<TParam1, TParam2, TParam3, TContract>) : ArgConditionCopyNonLazyBinder
    + {static} FromPoolableMemoryPool(fromBinder:FactoryFromBinder<TParam1, TParam2, TParam3, TContract>, poolBindGenerator:Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>>) : ArgConditionCopyNonLazyBinder
    + {static} FromMonoPoolableMemoryPool(fromBinder:FactoryFromBinder<TParam1, TParam2, TParam3, TContract>) : ArgConditionCopyNonLazyBinder
    + {static} FromMonoPoolableMemoryPool(fromBinder:FactoryFromBinder<TParam1, TParam2, TParam3, TContract>, poolBindGenerator:Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>>) : ArgConditionCopyNonLazyBinder
    + {static} FromPoolableMemoryPool(fromBinder:FactoryFromBinder<TParam1, TParam2, TParam3, TContract>) : ArgConditionCopyNonLazyBinder
    + {static} FromPoolableMemoryPool(fromBinder:FactoryFromBinder<TParam1, TParam2, TParam3, TContract>, poolBindGenerator:Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>>) : ArgConditionCopyNonLazyBinder
}
FactoryFromBinderBase <|-- "FactoryFromBinder`4"
@enduml
