@startuml
class FilterWindow {
    + {static} <<readonly>> DefaultWidth : float = 250f
    + {static} <<readonly>> DefaultHeight : float = 300f
    <<const>> k_HeaderHeight : int = 30
    <<const>> k_WindowHeight : int
    <<const>> k_HelpHeight : int
    <<const>> k_ComponentSearch : string = "NodeSearchString"
    {static} s_LastClosedTime : long
    {static} s_DirtyList : bool
    m_Anim : float = 1
    m_AnimTarget : int = 1
    m_LastTime : long
    m_ScrollToSelected : bool
    m_DelayedSearch : string
    m_Search : string = ""
    m_HasSearch : bool <<get>>
    m_IsAnimating : bool <<get>>
    {static} FilterWindow()
    OnEnable() : void
    OnDisable() : void
    OnLostFocus() : void
    + {static} Show(position:Vector2, provider:IProvider) : bool
    {static} Invoke(t:Type, inst:object, method:string, args:object[]) : object
    Init(position:Vector2, provider:IProvider) : void
    CreateComponentTree() : void
    HandleKeyboard() : void
    <<const>> k_SearchHeader : string = "Search"
    RebuildSearch() : void
    GetElementRelative(rel:int) : GroupElement
    GoToParent() : void
    ListGUI(tree:Element[], anim:float, parent:GroupElement, grandParent:GroupElement) : void
    GoToChild(e:Element, addIfComponent:bool) : void
    ListGUI(tree:Element[], parent:GroupElement) : void
    GetChildren(tree:Element[], parent:Element) : List<Element>
}
interface IProvider {
    CreateComponentTree(tree:List<Element>) : void
    GoToChild(element:Element, addIfComponent:bool) : bool
}
class Element {
    + level : int
    + name : string <<get>>
    + CompareTo(o:object) : int
}
class GroupElement {
    + selectedIndex : int
    + WantsFocus : bool <<get>> <<protected set>>
    + <<virtual>> ShouldDisable : bool <<get>>
    + GroupElement(level:int, name:string)
    + <<virtual>> HandleKeyboard(evt:Event, window:FilterWindow, goToParent:Action) : bool
    + <<virtual>> OnGUI(sFilterWindow:FilterWindow) : bool
}
class Styles {
    + Styles()
}
class "List`1"<T> {
}
EditorWindow <|-- FilterWindow
FilterWindow --> "s_Styles" Styles
FilterWindow --> "s_FilterWindow" FilterWindow
FilterWindow --> "m_Provider" IProvider
FilterWindow o-> "m_Stack<GroupElement>" "List`1"
FilterWindow --> "m_ActiveParent" GroupElement
FilterWindow --> "m_ActiveElement" Element
FilterWindow +-- IProvider
IProvider --> "position" Vector2
FilterWindow +-- Element
IComparable <|-- Element
Element --> "content" GUIContent
FilterWindow +-- GroupElement
Element <|-- GroupElement
GroupElement --> "scroll" Vector2
FilterWindow +-- Styles
Styles o-> "header" GUIStyle
Styles o-> "componentButton" GUIStyle
Styles --> "groupButton" GUIStyle
Styles o-> "background" GUIStyle
Styles o-> "rightArrow" GUIStyle
Styles o-> "leftArrow" GUIStyle
@enduml
