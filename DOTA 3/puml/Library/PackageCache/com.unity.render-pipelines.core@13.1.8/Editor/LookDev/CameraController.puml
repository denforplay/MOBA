@startuml
class CameraController {
    m_StartZoom : float = 0.0f
    m_ZoomSpeed : float = 0.0f
    m_TotalMotion : float = 0.0f
    m_FlySpeedNormalized : float = .5f
    m_FlySpeed : float = 1f
    m_FlySpeedAccelerated : float = 0f
    <<const>> m_FlySpeedMin : float = .01f
    <<const>> m_FlySpeedMax : float = 2f
    <<const>> k_FlyAcceleration : float = 1.1f
    m_ShiftBoostedFly : bool = false
    m_InFlyMotion : bool
    m_IsDragging : bool
    inFlyMotion : bool <<get>> <<set>>
    flySpeedNormalized : float <<get>> <<set>>
    flySpeed : float <<get>> <<set>>
    + CameraController(window:DisplayWindow, focused:Action)
    + UpdateCameraState(context:Context, index:ViewIndex) : void
    OnMouseDrag(evt:MouseMoveEvent) : void
    OnKeyDown(evt:KeyDownEvent) : void
    OnChangeFPSCameraSpeed(evt:WheelEvent) : void
    OnZoom(evt:WheelEvent) : void
    OnMouseDragOrbit(evt:MouseMoveEvent) : void
    OnMouseDragFPS(evt:MouseMoveEvent) : void
    OnMouseDragPan(evt:MouseMoveEvent) : void
    OnMouseDragZoom(evt:MouseMoveEvent) : void
    OnKeyDownReset(evt:KeyDownEvent) : void
    OnKeyUpOrDownFPS(evt:KeyboardEventBase<T>) : void
    RegisterMotionChange(direction:Direction, evt:KeyboardEventBase<T>) : void
    GetMotionDirection() : Vector3
    UpdateFPSMotion() : void
    GetKeyCombinationByID(ID:string, combination:KeyCombination) : bool
    GetBehaviorTool(evt:MouseEventBase<T>, onMac:bool) : ViewTool
    OnMouseUp(evt:MouseUpEvent) : void
    OnMouseDown(evt:MouseDownEvent) : void
}
class SwitchableCameraController {
    switchedDrag : bool = false
    switchedWheel : bool = false
    + SwitchableCameraController(window:DisplayWindow, focused:Action<ViewIndex>)
    + UpdateCameraState(context:Context) : void
    SwitchTo(index:ViewIndex) : void
    + SwitchUntilNextEndOfDrag() : void
    + SwitchUntilNextWheelEvent() : void
}
enum Direction {
    None= 0,
    Up= 1 << 0,
    Down= 1 << 1,
    Left= 1 << 2,
    Right= 1 << 3,
    Forward= 1 << 4,
    Backward= 1 << 5,
    All= Up | Down | Left | Right | Forward | Backward,
}
class KeyCombination <<struct>> {
    + shiftOnLastMatch : bool
    + KeyCombination(shortcutCombination:UnityEditor.ShortcutManagement.KeyCombination)
    + Match(evt:IKeyboardEvent, atLeastForModifier:bool) : bool
}
class TimeHelper <<struct>> {
    lastTime : long
    + Begin() : void
    + Update() : float
}
Manipulator <|-- CameraController
CameraController o-> "m_DirectionKeyPressed" Direction
CameraController o-> "m_MotionDirection" Vector3
CameraController o-> "s_Timer" TimeHelper
CameraController --> "m_BehaviorState" ViewTool
CameraController --> "behaviorState" ViewTool
CameraController --> "m_Window" DisplayWindow
CameraController --> "screen" Rect
CameraController <|-- SwitchableCameraController
SwitchableCameraController --> "m_FirstView" CameraState
SwitchableCameraController --> "m_SecondView" CameraState
SwitchableCameraController --> "m_CurrentViewIndex" ViewIndex
CameraController +-- Direction
CameraController +-- KeyCombination
KeyCombination --> "key" KeyCode
KeyCombination --> "modifier" EventModifiers
CameraController +-- TimeHelper
@enduml
