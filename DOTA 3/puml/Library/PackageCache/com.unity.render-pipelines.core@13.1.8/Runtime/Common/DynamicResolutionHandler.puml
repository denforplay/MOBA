@startuml
enum DynamicResScalePolicyType {
    ReturnsPercentage,
    ReturnsMinMaxLerpFactor,
}
enum DynamicResScalerSlot {
    User,
    System,
    Count,
}
class DynamicResolutionHandler {
    + runUpscalerFilterOnFullResolution : bool <<set>> <<get>>
    + GetResolvedScale() : Vector2
    + CalculateMipBias(inputResolution:Vector2Int, outputResolution:Vector2Int, forceApply:bool) : float
    {static} + SetDynamicResScaler(scaler:PerformDynamicRes, scalerType:DynamicResScalePolicyType) : void
    {static} + SetSystemDynamicResScaler(scaler:PerformDynamicRes, scalerType:DynamicResScalePolicyType) : void
    {static} + SetActiveDynamicScalerSlot(slot:DynamicResScalerSlot) : void
    + {static} ClearSelectedCamera() : void
    {static} + SetUpscaleFilter(camera:Camera, filter:DynamicResUpscaleFilter) : void
    + SetCurrentCameraRequest(cameraRequest:bool) : void
    + {static} UpdateAndUseCamera(camera:Camera, settings:GlobalDynamicResolutionSettings?, OnResolutionChange:Action) : void
    + Update(settings:GlobalDynamicResolutionSettings, OnResolutionChange:Action) : void
    + SoftwareDynamicResIsEnabled() : bool
    + HardwareDynamicResIsEnabled() : bool
    + RequestsHardwareDynamicResolution() : bool
    + DynamicResolutionEnabled() : bool
    + ForceSoftwareFallback() : void
    + GetScaledSize(size:Vector2Int) : Vector2Int
    + ApplyScalesOnSize(size:Vector2Int) : Vector2Int
    + GetCurrentScale() : float
    + GetLastScaledSize() : Vector2Int
    + GetLowResMultiplier(targetLowRes:float) : float
}
class ScalerContainer <<struct>> {
}
class "Dictionary`2"<T1,T2> {
}
enum UpsamplerScheduleType {
    BeforePost,
    AfterPost,
}
DynamicResolutionHandler --> "filter" DynamicResUpscaleFilter
DynamicResolutionHandler o-> "s_CameraUpscaleFilters<int,DynamicResUpscaleFilter>" "Dictionary`2"
DynamicResolutionHandler --> "finalViewport" Vector2Int
DynamicResolutionHandler --> "upsamplerSchedule" UpsamplerScheduleType
DynamicResolutionHandler --> "instance" DynamicResolutionHandler
DynamicResolutionHandler +-- ScalerContainer
ScalerContainer --> "type" DynamicResScalePolicyType
ScalerContainer --> "method" PerformDynamicRes
DynamicResolutionHandler +-- UpsamplerScheduleType
@enduml
