@startuml
abstract class TrackAsset <<partial>> {
    m_Locked : bool
    m_Muted : bool
    m_CustomPlayableFullTypename : string
    m_ItemsHash : int
    m_CacheSorted : bool
    m_SupportsNotifications : bool?
    + start : double <<get>>
    + end : double <<get>>
    + <<sealed>> <<override>> duration : double <<get>>
    + muted : bool <<get>> <<set>>
    + mutedInHierarchy : bool <<get>>
    + GetClips() : IEnumerable<TimelineClip>
    + <<virtual>> isEmpty : bool <<get>>
    + hasClips : bool <<get>>
    + hasCurves : bool <<get>>
    + isSubTrack : bool <<get>>
    + GetChildTracks() : IEnumerable<TrackAsset>
    defaultCurvesName : string <<get>>
    + locked : bool <<get>> <<set>>
    + lockedInHierarchy : bool <<get>>
    + supportsNotifications : bool <<get>>
    __internalAwake() : void
    + CreateCurves(curvesClipName:string) : void
    + <<virtual>> CreateTrackMixer(graph:PlayableGraph, go:GameObject, inputCount:int) : Playable
    + <<sealed>> <<override>> CreatePlayable(graph:PlayableGraph, go:GameObject) : Playable
    + CreateDefaultClip() : TimelineClip
    + CreateClip() : TimelineClip
    + DeleteClip(clip:TimelineClip) : bool
    + CreateMarker(type:Type, time:double) : IMarker
    + CreateMarker(time:double) : T
    + DeleteMarker(marker:IMarker) : bool
    + GetMarkers() : IEnumerable<IMarker>
    + GetMarkerCount() : int
    + GetMarker(idx:int) : IMarker
    GetTimeRangeHash() : int
    CreateNotificationsPlayable(graph:PlayableGraph, mixerPlayable:Playable, go:GameObject, timelinePlayable:Playable) : Playable
    GatherCompilableTracks(tracks:IList<TrackAsset>) : void
    GatherNotifications(markers:List<IMarker>) : void
    + <<virtual>> GatherProperties(director:PlayableDirector, driver:IPropertyCollector) : void
    UpdateDuration() : void
    + <<virtual>> CanCreateTrackMixer() : bool
    GetClipsHash() : int
    HasNotifications() : bool
    CanCompileNotifications() : bool
    CanCreateMixerRecursive() : bool
}
class TransientBuildData <<struct>> {
    + {static} Create() : TransientBuildData
    + Clear() : void
}
class "List`1"<T> {
}
class "IEnumerable`1"<T> {
}
class "Dictionary`2"<T1,T2> {
}
PlayableAsset <|-- TrackAsset
IPropertyPreview <|-- TrackAsset
ICurvesOwner <|-- TrackAsset
TrackAsset --> "m_Curves" AnimationClip
TrackAsset --> "m_Parent" PlayableAsset
TrackAsset --> "m_Children<ScriptableObject>" "List`1"
TrackAsset --> "m_Start" DiscreteTime
TrackAsset --> "m_End" DiscreteTime
TrackAsset --> "m_ChildTrackCache<TrackAsset>" "IEnumerable`1"
TrackAsset o-> "s_TrackBindingTypeAttributeCache<Type,TrackBindingTypeAttribute>" "Dictionary`2"
TrackAsset o-> "m_Markers" MarkerList
TrackAsset --> "timelineAsset" TimelineAsset
TrackAsset --> "parent" PlayableAsset
TrackAsset --> "outputs<PlayableBinding>" "IEnumerable`1"
TrackAsset --> "curves" AnimationClip
TrackAsset --> "asset" Object
TrackAsset --> "assetOwner" Object
TrackAsset --> "targetTrack" TrackAsset
TrackAsset +-- TransientBuildData
TransientBuildData --> "trackList<TrackAsset>" "List`1"
TransientBuildData --> "clipList<TimelineClip>" "List`1"
TransientBuildData --> "markerList<IMarker>" "List`1"
@enduml
