@startuml
class CurveBindingPair <<struct>> {
}
class CurveBindingGroup {
    + isFloatCurve : bool <<get>>
    + isObjectCurve : bool <<get>>
    + count : int <<get>>
}
class AnimationClipCurveInfo {
    m_CurveDirty : bool = true
    m_KeysDirty : bool = true
    + dirty : bool <<get>> <<set>>
    + version : int <<get>>
    + GetCurveTimes(curve:EditorCurveBinding) : float[]
    + GetCurveTimes(curves:EditorCurveBinding[]) : float[]
    RebuildKeyCache() : void
    + Update(clip:AnimationClip) : void
    + GetBindingForCurve(curve:AnimationCurve, binding:EditorCurveBinding) : bool
    + GetCurveForBinding(binding:EditorCurveBinding) : AnimationCurve
    + GetObjectCurveForBinding(binding:EditorCurveBinding) : ObjectReferenceKeyframe[]
    + GetGroupBinding(groupID:string) : CurveBindingGroup
}
class AnimationClipCurveCache {
    m_IsEnabled : bool
    + OnEnable() : void
    + OnDisable() : void
    OnCurveWasModified(clip:AnimationClip, binding:EditorCurveBinding, modification:AnimationUtility.CurveModifiedType) : void
    + GetCurveInfo(clip:AnimationClip) : AnimationClipCurveInfo
    + ClearCachedProxyClips() : void
    + Clear() : void
}
class EditorCurveBindingExtension <<static>> {
    + {static} GetGroupID(binding:EditorCurveBinding) : string
}
class CurveBindingGroupExtensions <<static>> {
    + {static} IsEnableGroup(curves:CurveBindingGroup) : bool
    + {static} IsVectorGroup(curves:CurveBindingGroup) : bool
    + {static} IsColorGroup(curves:CurveBindingGroup) : bool
    + {static} GetDescription(group:CurveBindingGroup, t:float) : string
}
class "List`1"<T> {
}
class "Dictionary`2"<T1,T2> {
}
CurveBindingPair --> "binding" EditorCurveBinding
CurveBindingPair --> "curve" AnimationCurve
CurveBindingGroup --> "timeRange" Vector2
CurveBindingGroup --> "valueRange" Vector2
AnimationClipCurveInfo --> "objectCurves<ObjectReferenceKeyframe[]>" "List`1"
AnimationClipCurveInfo --> "m_groupings<string,CurveBindingGroup>" "Dictionary`2"
AnimationClipCurveInfo --> "m_individualBindinsKey<EditorCurveBinding,float[]>" "Dictionary`2"
AnimationClipCurveCache --> "s_Instance" AnimationClipCurveCache
AnimationClipCurveCache o-> "m_ClipCache<AnimationClip,AnimationClipCurveInfo>" "Dictionary`2"
AnimationClipCurveCache --> "Instance" AnimationClipCurveCache
@enduml
