@startuml
class ControlPlayableInspector {
    m_CycleReference : bool
    + OnEnable() : void
    + <<override>> OnInspectorGUI() : void
    + DisablePlayOnAwake(sourceObject:GameObject) : void
    + DisablePlayOnAwake(director:PlayableDirector) : void
    CheckForCyclicReference() : void
}
class Styles <<static>> {
    {static} s_DisabledBecauseOfSelfControlTooltip : string = "Must be disabled when the Source Game Object references the same PlayableDirector component that is being controlled"
}
Editor <|-- ControlPlayableInspector
ControlPlayableInspector --> "m_SourceObject" SerializedProperty
ControlPlayableInspector --> "m_PrefabObject" SerializedProperty
ControlPlayableInspector --> "m_UpdateParticle" SerializedProperty
ControlPlayableInspector --> "m_UpdateDirector" SerializedProperty
ControlPlayableInspector --> "m_UpdateITimeControl" SerializedProperty
ControlPlayableInspector --> "m_SearchHierarchy" SerializedProperty
ControlPlayableInspector --> "m_UseActivation" SerializedProperty
ControlPlayableInspector --> "m_PostPlayback" SerializedProperty
ControlPlayableInspector --> "m_RandomSeed" SerializedProperty
ControlPlayableInspector o-> "m_SourceObjectLabel" GUIContent
ControlPlayableInspector +-- Styles
Styles o-> "activationContent" GUIContent
Styles o-> "activationDisabledContent" GUIContent
Styles o-> "prefabContent" GUIContent
Styles o-> "advancedContent" GUIContent
Styles o-> "updateParticleSystemsContent" GUIContent
Styles o-> "updatePlayableDirectorContent" GUIContent
Styles o-> "updatePlayableDirectorDisabledContent" GUIContent
Styles o-> "updateITimeControlContent" GUIContent
Styles o-> "updateHierarchy" GUIContent
Styles o-> "randomSeedContent" GUIContent
Styles o-> "postPlayableContent" GUIContent
@enduml
