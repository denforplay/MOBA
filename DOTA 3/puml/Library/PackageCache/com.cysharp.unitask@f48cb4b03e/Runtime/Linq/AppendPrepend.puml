@startuml
class UniTaskAsyncEnumerable <<static>> <<partial>> {
    + {static} Append(source:IUniTaskAsyncEnumerable<TSource>, element:TSource) : IUniTaskAsyncEnumerable<TSource>
    + {static} Prepend(source:IUniTaskAsyncEnumerable<TSource>, element:TSource) : IUniTaskAsyncEnumerable<TSource>
}
class "AppendPrepend`1"<TSource> <<sealed>> {
    <<readonly>> element : TSource
    <<readonly>> append : bool
    + AppendPrepend(source:IUniTaskAsyncEnumerable<TSource>, element:TSource, append:bool)
    + GetAsyncEnumerator(cancellationToken:CancellationToken) : IUniTaskAsyncEnumerator<TSource>
}
class "IUniTaskAsyncEnumerable`1"<T> {
}
class _AppendPrepend <<sealed>> {
    + _AppendPrepend(source:IUniTaskAsyncEnumerable<TSource>, element:TSource, append:bool, cancellationToken:CancellationToken)
    + MoveNextAsync() : UniTask<bool>
    {static} MoveNextCore(state:object) : void
    + DisposeAsync() : UniTask
}
class "IUniTaskAsyncEnumerator`1"<T> {
}
enum State {
    None,
    RequirePrepend,
    RequireAppend,
    Completed,
}
class "Action`1"<T> {
}
"IUniTaskAsyncEnumerable`1" "<TSource>" <|-- "AppendPrepend`1"
"AppendPrepend`1" --> "source<TSource>" "IUniTaskAsyncEnumerable`1"
"AppendPrepend`1" +-- _AppendPrepend
MoveNextSource <|-- _AppendPrepend
"IUniTaskAsyncEnumerator`1" "<TSource>" <|-- _AppendPrepend
_AppendPrepend o-> "MoveNextCoreDelegate<object>" "Action`1"
_AppendPrepend --> "source<TSource>" "IUniTaskAsyncEnumerable`1"
_AppendPrepend --> "element" TSource
_AppendPrepend --> "cancellationToken" CancellationToken
_AppendPrepend --> "state" State
_AppendPrepend --> "enumerator<TSource>" "IUniTaskAsyncEnumerator`1"
_AppendPrepend --> "Current" TSource
_AppendPrepend +-- State
@enduml
