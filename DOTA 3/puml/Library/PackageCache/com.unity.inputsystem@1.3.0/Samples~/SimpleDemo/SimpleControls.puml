@startuml
class "@SimpleControls" <<partial>> {
    + @SimpleControls()
    + Dispose() : void
    + bindingMask : InputBinding? <<get>> <<set>>
    + devices : ReadOnlyArray<InputDevice>? <<get>> <<set>>
    + Contains(action:InputAction) : bool
    + GetEnumerator() : IEnumerator<InputAction>
    GetEnumerator() : IEnumerator
    + Enable() : void
    + Disable() : void
    + FindAction(actionNameOrId:string, throwIfNotFound:bool) : InputAction
    + FindBinding(bindingMask:InputBinding, action:InputAction) : int
}
class "ReadOnlyArray`1"<T> {
}
class "IEnumerable`1"<T> {
}
class GameplayActions <<struct>> {
    + GameplayActions(wrapper:@SimpleControls)
    + Get() : InputActionMap
    + Enable() : void
    + Disable() : void
    + enabled : bool <<get>>
    + SetCallbacks(instance:IGameplayActions) : void
}
interface IGameplayActions {
    OnFire(context:InputAction.CallbackContext) : void
    OnMove(context:InputAction.CallbackContext) : void
    OnLook(context:InputAction.CallbackContext) : void
}
IInputActionCollection2 <|-- "@SimpleControls"
IDisposable <|-- "@SimpleControls"
"@SimpleControls" --> "asset" InputActionAsset
"@SimpleControls" --> "controlSchemes<InputControlScheme>" "ReadOnlyArray`1"
"@SimpleControls" --> "bindings<InputBinding>" "IEnumerable`1"
"@SimpleControls" --> "@gameplay" GameplayActions
"@SimpleControls" +-- GameplayActions
GameplayActions --> "@fire" InputAction
GameplayActions --> "@move" InputAction
GameplayActions --> "@look" InputAction
"@SimpleControls" +-- IGameplayActions
@enduml
